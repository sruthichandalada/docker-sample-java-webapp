pipeline {
    agent { label 'tomcat' }                     // running on the agent
    
    parameters {
        choice(name: 'NAMESPACE', choices: ['dev', 'test', 'prod'], description: 'Select the Kubernetes namespace to deploy to')      //using choice parameters to deploy the application in different ns
    }

    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO = '881490114731.dkr.ecr.ap-south-1.amazonaws.com/jan2025'
        IMAGE_TAG = "v${BUILD_NUMBER}"                                           //double quotes while accessing the values of the variables ,rolling out the newer version after every build
        GIT_REPO = 'https://github.com/sruthichandalada/docker-sample-java-webapp.git'
        KUBE_CONFIG_CREDENTIAL_ID = 'kube-config-id' // Jenkins credentials ID
    }

    stages {
        stage('Checkout') {
            steps {
                git url: "${GIT_REPO}"
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t ${ECR_REPO}:${IMAGE_TAG} ."
                }
            }
        }

        stage('Push to ECR') {
            steps {
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                        docker push ${ECR_REPO}:${IMAGE_TAG}
                    """
                }
            }
        }

     stage('Deploy to Kubernetes') {
         steps {
             withCredentials([file(credentialsId: "${KUBE_CONFIG_CREDENTIAL_ID}", variable: 'KUBECONFIG')]) {
                sh '''
                   export KUBECONFIG=$KUBECONFIG
                   echo "Deploying to namespace: ${NAMESPACE}"

                   # Replace image placeholder
                   sed -i "s|IMAGE_PLACEHOLDER|${ECR_REPO}:${IMAGE_TAG}|g" k8s/deployment.yaml        

                   # Apply both deployment and service manifests
                   kubectl apply -n ${NAMESPACE} -f k8s/
                    '''
                 }
             }
         }
    }
}
